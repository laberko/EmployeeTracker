//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmpTrackerApp.EmpTrackerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientWindow", Namespace="http://schemas.datacontract.org/2004/07/EmpTrackerWCFLibrary")]
    [System.SerializableAttribute()]
    public partial class ClientWindow : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessName {
            get {
                return this.ProcessNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessNameField, value) != true)) {
                    this.ProcessNameField = value;
                    this.RaisePropertyChanged("ProcessName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WindowSummary", Namespace="http://schemas.datacontract.org/2004/07/EmpTrackerWCFLibrary")]
    [System.SerializableAttribute()]
    public partial class WindowSummary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, int> TopActiveProcessesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, int> TopActiveWindowsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, int> TopActiveProcesses {
            get {
                return this.TopActiveProcessesField;
            }
            set {
                if ((object.ReferenceEquals(this.TopActiveProcessesField, value) != true)) {
                    this.TopActiveProcessesField = value;
                    this.RaisePropertyChanged("TopActiveProcesses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, int> TopActiveWindows {
            get {
                return this.TopActiveWindowsField;
            }
            set {
                if ((object.ReferenceEquals(this.TopActiveWindowsField, value) != true)) {
                    this.TopActiveWindowsField = value;
                    this.RaisePropertyChanged("TopActiveWindows");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EmpTrackerService.IEmpTrackerService")]
    public interface IEmpTrackerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpTrackerService/CurrentWindows", ReplyAction="http://tempuri.org/IEmpTrackerService/CurrentWindowsResponse")]
        EmpTrackerApp.EmpTrackerService.ClientWindow[] CurrentWindows();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpTrackerService/CurrentWindows", ReplyAction="http://tempuri.org/IEmpTrackerService/CurrentWindowsResponse")]
        System.Threading.Tasks.Task<EmpTrackerApp.EmpTrackerService.ClientWindow[]> CurrentWindowsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpTrackerService/Summary", ReplyAction="http://tempuri.org/IEmpTrackerService/SummaryResponse")]
        EmpTrackerApp.EmpTrackerService.WindowSummary[] Summary();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpTrackerService/Summary", ReplyAction="http://tempuri.org/IEmpTrackerService/SummaryResponse")]
        System.Threading.Tasks.Task<EmpTrackerApp.EmpTrackerService.WindowSummary[]> SummaryAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmpTrackerServiceChannel : EmpTrackerApp.EmpTrackerService.IEmpTrackerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmpTrackerServiceClient : System.ServiceModel.ClientBase<EmpTrackerApp.EmpTrackerService.IEmpTrackerService>, EmpTrackerApp.EmpTrackerService.IEmpTrackerService {
        
        public EmpTrackerServiceClient() {
        }
        
        public EmpTrackerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmpTrackerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmpTrackerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmpTrackerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EmpTrackerApp.EmpTrackerService.ClientWindow[] CurrentWindows() {
            return base.Channel.CurrentWindows();
        }
        
        public System.Threading.Tasks.Task<EmpTrackerApp.EmpTrackerService.ClientWindow[]> CurrentWindowsAsync() {
            return base.Channel.CurrentWindowsAsync();
        }
        
        public EmpTrackerApp.EmpTrackerService.WindowSummary[] Summary() {
            return base.Channel.Summary();
        }
        
        public System.Threading.Tasks.Task<EmpTrackerApp.EmpTrackerService.WindowSummary[]> SummaryAsync() {
            return base.Channel.SummaryAsync();
        }
    }
}
